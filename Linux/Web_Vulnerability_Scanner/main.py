import os
import requests
import socket
import threading
import time
import sys
from bs4 import BeautifulSoup

# Colors for CLI
RED = "\033[91m"
GREEN = "\033[92m"
BLUE = "\033[94m"
RESET = "\033[0m"

LOG_FILE = "./scan_results.log"

# Spinner animation
spinner = ['|', '/', '-', '\\']
stop_threads = False  # Global flag to stop threads


def write_log(message):
    """Write messages to a log file."""
    with open(LOG_FILE, "a") as log_file:
        log_file.write(f"{message}\n")


def banner():
    """Display banner."""
    print(f"""
{GREEN}
=========================================
     Multi-Tool Web Vulnerability Scanner
=========================================
{RESET}
""")
    write_log("Started Multi-Tool Web Vulnerability Scanner")


def animate_task(task_name):
    """Show animated progress for tasks."""
    sys.stdout.write(f"{BLUE}[+] {task_name}...{RESET}")
    sys.stdout.flush()
    for _ in range(10):
        if stop_threads:
            break
        for char in spinner:
            sys.stdout.write(f"\r{BLUE}[+] {task_name}... {char}{RESET}")
            sys.stdout.flush()
            time.sleep(0.2)
    sys.stdout.write("\r" + " " * 50 + "\r")  # Clear line


def port_scan(target, ports):
    """Perform a port scan."""
    write_log("[+] Starting Port Scan")
    animate_task("Port Scanning")
    open_ports = []
    for port in ports:
        if stop_threads:
            break
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(1)
                if sock.connect_ex((target, port)) == 0:
                    open_ports.append(port)
                    message = f"[+] Open Port: {port}"
                    print(f"{GREEN}{message}{RESET}")
                    write_log(message)
        except socket.error:
            pass
    return open_ports


def dir_bruteforce(target, wordlist):
    """Perform directory brute-forcing."""
    write_log("[+] Starting Directory Brute-Force")
    animate_task("Directory Brute-Force")
    with open(wordlist, "r") as file:
        for line in file:
            if stop_threads:
                break
            dir_path = line.strip()
            url = f"{target}/{dir_path}"
            try:
                response = requests.get(url, timeout=5)
                if response.status_code == 200:
                    message = f"[+] Found Directory: {url}"
                    print(f"{GREEN}{message}{RESET}")
                    write_log(message)
            except requests.RequestException:
                pass


def check_headers(target):
    """Check HTTP headers for vulnerabilities."""
    write_log("[+] Checking HTTP Headers")
    animate_task("HTTP Headers Check")
    try:
        response = requests.get(target, timeout=5)
        headers = response.headers
        if "X-XSS-Protection" not in headers:
            message = "[!] X-XSS-Protection Header Missing"
            print(f"{RED}{message}{RESET}")
            write_log(message)
        if "Content-Security-Policy" not in headers:
            message = "[!] Content-Security-Policy Header Missing"
            print(f"{RED}{message}{RESET}")
            write_log(message)
        if "X-Content-Type-Options" not in headers:
            message = "[!] X-Content-Type-Options Header Missing"
            print(f"{RED}{message}{RESET}")
            write_log(message)
        print(f"{GREEN}[+] Headers Checked Successfully{RESET}")
    except requests.RequestException as e:
        message = f"[!] Error checking headers: {e}"
        print(f"{RED}{message}{RESET}")
        write_log(message)


def sql_injection_check(target):
    """Detect SQL injection vulnerabilities."""
    write_log("[+] Checking for SQL Injection vulnerabilities")
    animate_task("SQL Injection Check")
    payloads = ["'", "OR 1=1", "'--", "' OR '1'='1"]
    try:
        for payload in payloads:
            if stop_threads:
                break
            response = requests.get(f"{target}?id={payload}", timeout=5)
            if "SQL" in response.text or "syntax" in response.text:
                message = f"[!] SQL Injection Vulnerability Detected with payload: {
                    payload}"
                print(f"{RED}{message}{RESET}")
                write_log(message)
    except requests.RequestException:
        message = "[!] Error testing SQL Injection"
        print(f"{RED}{message}{RESET}")
        write_log(message)


def main():
    """Main function."""
    global stop_threads
    banner()
    target = input(f"{BLUE}[+] Enter Target URL (http://example.com): {RESET}")
    wordlist = input(f"{BLUE}[+] Enter Path to Directory Wordlist: {RESET}")

    if not target.startswith("http"):
        print(
            f"{RED}[!] Please provide a valid URL starting with http or https{RESET}")
        return

    threads = []

    # Port Scan
    ports = range(20, 1025)
    t1 = threading.Thread(target=port_scan, args=(
        target.replace("http://", "").replace("https://", ""), ports))
    threads.append(t1)

    # Directory Brute-Force
    t2 = threading.Thread(target=dir_bruteforce, args=(target, wordlist))
    threads.append(t2)

    # Check Headers
    t3 = threading.Thread(target=check_headers, args=(target,))
    threads.append(t3)

    # SQL Injection Check
    t4 = threading.Thread(target=sql_injection_check, args=(target,))
    threads.append(t4)

    try:
        # Start Threads
        for thread in threads:
            thread.start()

        # Wait for all threads
        while any(thread.is_alive() for thread in threads):
            time.sleep(0.1)

        print(f"{GREEN}[+] Scanning Completed.{RESET}")
        write_log("[+] Scanning Completed")

    except KeyboardInterrupt:
        stop_threads = True
        print(f"{RED}\n[!] Scanner Interrupted. Exiting...{RESET}")
        write_log("[!] Scanner Interrupted by User")


if __name__ == "__main__":
    main()
