import os
import yara
import logging
import argparse
from datetime import datetime

# Constants for important directories and files
BASE_DIR = os.path.expanduser("./malware_scanner")
RULES_DIR = os.path.join(BASE_DIR, "rules")
LOG_FILE = os.path.join(BASE_DIR, "scanner.log")

# Initialize logging


def setup_logging():
    os.makedirs(BASE_DIR, exist_ok=True)
    logging.basicConfig(
        filename=LOG_FILE,
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s"
    )
    logging.info("Malware Scanner Initialized")

# Function to generate a sample YARA rule file


def generate_sample_rules():
    os.makedirs(RULES_DIR, exist_ok=True)
    sample_rule_path = os.path.join(RULES_DIR, "sample_rules.yar")
    if not os.path.exists(sample_rule_path):
        sample_rule_content = """
rule DummyRule
{
    strings:
        $malicious_string = "malicious_code"
    condition:
        $malicious_string
}
"""
        with open(sample_rule_path, "w") as f:
            f.write(sample_rule_content)
        logging.info(f"Sample YARA rule created at {sample_rule_path}")
    return RULES_DIR

# Compile YARA rules


def compile_rules(rules_directory):
    try:
        rule_files = [os.path.join(rules_directory, f) for f in os.listdir(
            rules_directory) if f.endswith(".yar")]
        if not rule_files:
            raise ValueError(
                "No YARA rule files found in the rules directory.")
        compiled_rules = yara.compile(
            filepaths={f"rule_{i}": file for i, file in enumerate(rule_files)})
        logging.info(f"Compiled {len(rule_files)} YARA rule files.")
        return compiled_rules
    except Exception as e:
        logging.error(f"Error compiling YARA rules: {e}")
        raise

# Scan a file using YARA rules


def scan_file(file_path, rules):
    try:
        matches = rules.match(file_path)
        if matches:
            logging.warning(f"Malware detected in {file_path}: {matches}")
            return True, matches
        else:
            logging.info(f"No threats found in {file_path}.")
            return False, []
    except Exception as e:
        logging.error(f"Error scanning file {file_path}: {e}")
        return False, []

# Recursively scan a directory


def scan_directory(directory_path, rules):
    logging.info(f"Scanning directory {directory_path}")
    for root, _, files in os.walk(directory_path):
        for file in files:
            file_path = os.path.join(root, file)
            scan_file(file_path, rules)

# Main function


def main():
    parser = argparse.ArgumentParser(
        description="Advanced Malware Scanner using YARA")
    parser.add_argument(
        "input",
        help="Path to file or directory to scan"
    )
    args = parser.parse_args()

    # Setup logging and environment
    setup_logging()
    rules_dir = generate_sample_rules()
    rules = compile_rules(rules_dir)

    # Scan input file or directory
    input_path = args.input
    if os.path.isfile(input_path):
        scan_file(input_path, rules)
    elif os.path.isdir(input_path):
        scan_directory(input_path, rules)
    else:
        logging.error(f"Invalid path provided: {input_path}")
        print(f"Error: The provided path '{input_path}' is not valid.")

    print(f"Scanning completed. Logs are available at {LOG_FILE}")


if __name__ == "__main__":
    main()
